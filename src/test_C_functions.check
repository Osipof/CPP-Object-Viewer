#include "backend/3d_viewer.h"

unsigned int indexes_array[] = {0, 6, 6, 4, 4, 0, 0, 2, 2, 6, 6, 0, 0, 3, 3, 2, 2, 0, 0, 1, 1, 3, 3, 0, 2, 7, 7, 6, 6, 2, 2, 3, 3, 7, 7, 2, 4, 6, 6, 7, 7, 4, 4, 7, 7, 5, 5, 4, 0, 4, 4, 5, 5, 0, 0, 5, 5, 1, 1, 0, 1, 5, 5, 7, 7, 1, 1, 7, 7, 3, 3, 1};
double vertex_array[] = {0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 2.0, 0.0, 0.0, 2.0, 2.0, 2.0, 0.0, 0.0, 2.0, 0.0, 2.0, 2.0, 2.0, 0.0, 2.0, 2.0, 2.0};


object_t object = {0};
FILE *input = NULL;

#test parsing

fail_unless(!parsing_object_t(&object, "objs/cube.obj"));

fail_unless(object.count_of_vertexes == 24);
for (unsigned int i = 0; i < object.count_of_vertexes; i++) {
    ck_assert_double_eq_tol(object.vertexes[i], vertex_array[i], 1e-7);
}

fail_unless(object.count_of_edges == 60);
for (unsigned int i = 0; i < object.count_of_edges; i++) {
    fail_unless(object.edges[i] == indexes_array[i]);
}

remove_object_t(&object);


#test normalization

fail_unless(!parsing_object_t(&object, "objs/cube.obj"));

fail_unless(object.count_of_vertexes == 24);
for (unsigned int i = 0; i < object.count_of_vertexes; i++) {
    ck_assert_double_eq_tol(object.vertexes[i], vertex_array[i], 1e-7);
}

ck_assert_double_eq_tol(normalization_object_t(&object), 0.5, 1e-6);

remove_object_t(&object);

#test move

fail_unless(!parsing_object_t(&object, "objs/cube.obj"));

fail_unless(object.count_of_vertexes == 24);
for (unsigned int i = 0; i < object.count_of_vertexes; i++) {
    ck_assert_double_eq_tol(object.vertexes[i], vertex_array[i], 1e-7);
}

moving_object_t(&object, 2.0, xAxis);
moving_object_t(&object, 3.0, yAxis);
moving_object_t(&object, 5.0, zAxis);

for (unsigned int i = 0; i < object.count_of_vertexes; i++) {
    if (i % 3 == xAxis) {
        ck_assert_double_eq_tol(object.vertexes[i], vertex_array[i] + 2.0, 1e-7);
    } else if (i % 3 == yAxis) {
        ck_assert_double_eq_tol(object.vertexes[i], vertex_array[i] + 3.0, 1e-7);
    } else if (i % 3 == zAxis) {
        ck_assert_double_eq_tol(object.vertexes[i], vertex_array[i] + 5.0, 1e-7);
    } else {
        fail_unless(0);
    }
}

remove_object_t(&object);

#test zoom

fail_unless(!parsing_object_t(&object, "objs/cube.obj"));

fail_unless(object.count_of_vertexes == 24);
for (unsigned int i = 0; i < object.count_of_vertexes; i++) {
    ck_assert_double_eq_tol(object.vertexes[i], vertex_array[i], 1e-7);
}

zoom_object_t(&object, 2.0);

for (unsigned int i = 0; i < object.count_of_vertexes; i++) {
    if (i % 3 == xAxis) {
        ck_assert_double_eq_tol(object.vertexes[i], vertex_array[i] * 2, 1e-7);
    } else if (i % 3 == yAxis) {
        ck_assert_double_eq_tol(object.vertexes[i], vertex_array[i] * 2, 1e-7);
    } else if (i % 3 == zAxis) {
        ck_assert_double_eq_tol(object.vertexes[i], vertex_array[i] * 2, 1e-7);
    } else {
        fail_unless(0);
    }
}

remove_object_t(&object);


#test rotation

fail_unless(!parsing_object_t(&object, "objs/cube.obj"));

fail_unless(object.count_of_vertexes == 24);
for (unsigned int i = 0; i < object.count_of_vertexes; i++) {
    ck_assert_double_eq_tol(object.vertexes[i], vertex_array[i], 1e-7);
}

rotation_object_t(&object, 2.0, xAxis);
rotation_object_t(&object, 3.0, yAxis);
rotation_object_t(&object, 4.0, zAxis);

ck_assert_double_eq_tol(object.vertexes[0], 0.0, 1e-6);
ck_assert_double_eq_tol(object.vertexes[1], 0.0, 1e-6);
ck_assert_double_eq_tol(object.vertexes[2], 0.0, 1e-6);

ck_assert_double_eq_tol(object.vertexes[3], -1.2995445, 1e-6);
ck_assert_double_eq_tol(object.vertexes[4], 1.2776019, 1e-6);
ck_assert_double_eq_tol(object.vertexes[5], 0.8239645, 1e-6);

ck_assert_double_eq_tol(object.vertexes[6], -0.7976331, 1e-6);
ck_assert_double_eq_tol(object.vertexes[7], 0.3497976, 1e-6);
ck_assert_double_eq_tol(object.vertexes[8], -1.8003953, 1e-6);

ck_assert_double_eq_tol(object.vertexes[9], -2.0971776, 1e-6);
ck_assert_double_eq_tol(object.vertexes[10], 1.6273994, 1e-6);
ck_assert_double_eq_tol(object.vertexes[11], -0.9764308, 1e-6);

ck_assert_double_eq_tol(object.vertexes[12], 1.2942046, 1e-6);
ck_assert_double_eq_tol(object.vertexes[13], 1.4984576, 1e-6);
ck_assert_double_eq_tol(object.vertexes[14], -0.2822400, 1e-6);

ck_assert_double_eq_tol(object.vertexes[15], -0.0053400, 1e-6);
ck_assert_double_eq_tol(object.vertexes[16], 2.7760595, 1e-6);
ck_assert_double_eq_tol(object.vertexes[17], 0.5417245, 1e-6);

ck_assert_double_eq_tol(object.vertexes[18], 0.4965715, 1e-6);
ck_assert_double_eq_tol(object.vertexes[19], 1.8482552, 1e-6);
ck_assert_double_eq_tol(object.vertexes[20], -2.0826353, 1e-6);

ck_assert_double_eq_tol(object.vertexes[21], -0.8029731, 1e-6);
ck_assert_double_eq_tol(object.vertexes[22], 3.1258570, 1e-6);
ck_assert_double_eq_tol(object.vertexes[23], -1.2586708, 1e-6);

remove_object_t(&object);


#test centralize

fail_unless(!parsing_object_t(&object, "objs/cube.obj"));

fail_unless(object.count_of_vertexes == 24);
for (unsigned int i = 0; i < object.count_of_vertexes; i++) {
    ck_assert_double_eq_tol(object.vertexes[i], vertex_array[i], 1e-7);
}

centralize_object_t(&object);

for (unsigned int i = 0; i < object.count_of_vertexes; i++) {
    ck_assert_double_eq_tol(object.vertexes[i], vertex_array[i] - 1.0, 1e-7);
}

remove_object_t(&object);